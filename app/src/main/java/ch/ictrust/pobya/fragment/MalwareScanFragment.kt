package ch.ictrust.pobya.fragment


import android.content.Intent
import android.graphics.Color
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.constraintlayout.widget.ConstraintLayout.LayoutParams
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.coordinatorlayout.widget.CoordinatorLayout
import androidx.fragment.app.Fragment
import androidx.lifecycle.LiveData
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import ch.ictrust.pobya.R
import ch.ictrust.pobya.activity.AppDetailActivity
import ch.ictrust.pobya.adapter.AppsAdapter
import ch.ictrust.pobya.models.InstalledApplication
import ch.ictrust.pobya.service.MalwareScanService
import com.airbnb.lottie.LottieAnimationView
import com.owl93.dpb.CircularProgressView
import kotlinx.android.synthetic.main.activity_main.*
import kotlinx.android.synthetic.main.fragment_malware_scan.*
import kotlinx.android.synthetic.main.app_bar_main.*
import kotlinx.android.synthetic.main.app_bar_main.view.*
import kotlinx.coroutines.*


class MalwareScanFragment : Fragment() {

    private lateinit var malwareScanWheelProgress: CircularProgressView
    private lateinit var scanButton : Button
    private lateinit var malscanResultLotie: LottieAnimationView
    private lateinit var scanOK: TextView
    private var malwarePackgesApps: MutableList<InstalledApplication> = mutableListOf()
    private lateinit var malwareRecyclerView : RecyclerView
    private val currentProgress: LiveData<Float> = MalwareScanService.scanProgressLiveData
    private val currentMalwareDetected: LiveData<ArrayList<InstalledApplication>> = MalwareScanService.detectedMalwarePackagesApps
    private val currentStatusText : LiveData<String> = MalwareScanService.scanStatus
    private lateinit var  frameLayoutcontainer: FrameLayout
    private lateinit var llMalwareFoundLayout : LinearLayout

    private lateinit var appsAdapter: AppsAdapter

    lateinit var appsViewModel: AppsViewModel

    private val scanJob = Job()
    @OptIn(DelicateCoroutinesApi::class)
    private val uiScope = CoroutineScope(GlobalScope.coroutineContext + scanJob)


    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val view: View = inflater.inflate(R.layout.fragment_malware_scan, container, false)
        appsViewModel = ViewModelProvider(this)[AppsViewModel::class.java]

        malwareScanWheelProgress = view.findViewById(R.id.malware_scan_wheelprogress)
        scanButton = view.findViewById(R.id.scanHome)
        malscanResultLotie = view.findViewById(R.id.lottieMalwareResultAnimation)

        malwareRecyclerView = view.findViewById(R.id.rvMalwareList)
        scanOK = view.findViewById(R.id.tvScanOk)
        frameLayoutcontainer = view.findViewById(R.id.flMainContainer)

        llMalwareFoundLayout = view.findViewById(R.id.llMalwareFoundText)
        appsAdapter = AppsAdapter(view.context.applicationContext)


        llMalwareFoundLayout.visibility = CoordinatorLayout.VISIBLE
        malwareScanWheelProgress.animate()
        malwareScanWheelProgress.progress = 0F
        val intent = Intent(view.context, MalwareScanService::class.java)


        malwareScanWheelProgress.setOnClickListener(View.OnClickListener {
            if (scanButton.text == view.context.getString(R.string.scanning))
                return@OnClickListener

            malwareScanWheelProgress.progress = 0F
            malwareScanWheelProgress.strokeColor = resources.getColor(R.color.colorPrimary)
            scanOK.visibility = View.GONE
            frameLayoutcontainer.layoutParams = LayoutParams(LayoutParams.MATCH_PARENT,
                                                                LayoutParams.MATCH_PARENT)

            uiScope.launch {
                    Dispatchers.IO{
                        view.context.startService(intent)
                    }
            }

            malscanResultLotie.visibility = View.GONE
            malwareRecyclerView.apply {
                layoutManager = LinearLayoutManager(
                    view.context,
                    LinearLayoutManager.VERTICAL,
                    false
                )
                adapter = null
            }
        })
        currentStatusText.observe(viewLifecycleOwner) { current ->
            scanButton.text = current
        }


        currentMalwareDetected.observe(viewLifecycleOwner) { current ->
            malwarePackgesApps = current
            appsAdapter.submitList(malwarePackgesApps)
            malwareRecyclerView.apply {
                layoutManager = LinearLayoutManager(
                    view.context,
                    LinearLayoutManager.VERTICAL,
                    false
                )
                adapter = appsAdapter
            }
        }

        currentProgress.observe(viewLifecycleOwner) { current ->
            malwareScanWheelProgress.progress = current

            if (current >= 99.5) {
                frameLayoutcontainer.layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, 1000)
                if (malwarePackgesApps.size == 0) {
                    llMalwareFoundLayout.visibility = View.GONE
                    scanOK.visibility = View.VISIBLE
                    malscanResultLotie.visibility = LottieAnimationView.VISIBLE
                    malscanResultLotie.repeatCount = 1
                    malscanResultLotie.playAnimation()
                    malwareScanWheelProgress.strokeColor = Color.GREEN
                } else {
                    malwareRecyclerView.visibility = View.VISIBLE
                    llMalwareFoundLayout.visibility = ConstraintLayout.VISIBLE
                    malwareScanWheelProgress.strokeColor = view.context.getColor(R.color.warningColor)
                    appsAdapter.setOnItemClickListener(object : AppsAdapter.OnItemClickListener {
                        override fun onItemClick(app: InstalledApplication) {
                            val intentAppDetails = Intent(context, AppDetailActivity::class.java)
                            intentAppDetails.putExtra("app", app)
                            view.context.startActivity(intentAppDetails)
                        }
                    })
                }
            }
        }

        return view
    }

    override fun onStart() {
        super.onStart()
        activity?.nav_view?.setCheckedItem(R.id.nav_malware_scan)
        activity?.toolbar?.toolbarTitle?.text = getString(R.string.menu_malware_scan)
    }
}