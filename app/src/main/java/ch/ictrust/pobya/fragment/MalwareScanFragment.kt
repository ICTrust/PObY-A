package ch.ictrust.pobya.fragment

import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.net.ConnectivityManager
import android.net.Network
import android.net.NetworkCapabilities
import android.os.*
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.airbnb.lottie.LottieAnimationView
import ch.ictrust.pobya.R
import ch.ictrust.pobya.Utillies.DumpApps
import ch.ictrust.pobya.activity.AppDetailActivity
import ch.ictrust.pobya.activity.MainActivity
import ch.ictrust.pobya.adapter.InstalledAppsAdapter
import ch.ictrust.pobya.listener.ItemClickListener
import ch.ictrust.pobya.models.InstalledApp
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import com.owl93.dpb.CircularProgressView
import kotlinx.android.synthetic.main.activity_main.*
import kotlinx.android.synthetic.main.app_bar_main.*
import kotlinx.android.synthetic.main.app_bar_main.view.*


class MalwareScanFragment : Fragment() {

    lateinit var lottieScanAnimation : LottieAnimationView
    lateinit var  malwareScanWheelProgress: CircularProgressView
    lateinit var currentApp: TextView
    lateinit var malwareScanRecyclerView : RecyclerView
    lateinit var scanButton : Button


    @RequiresApi(Build.VERSION_CODES.M)
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view: View = inflater.inflate(R.layout.fragment_malware_scan, container, false)
        malwareScanWheelProgress = view.findViewById(R.id.malware_scan_wheelprogress) as CircularProgressView
        lottieScanAnimation = view.findViewById(R.id.malware_scan_animation)
        currentApp = view.findViewById(R.id.malware_app_scan_tv)
        malwareScanRecyclerView = view.findViewById(R.id.malware_list_recyclerView)
        scanButton = view.findViewById(R.id.scanHome)

        currentApp.text = ""
        lottieScanAnimation.visibility = View.GONE

        malwareScanWheelProgress.animate()
        malwareScanWheelProgress.progress = 0F
        var malwareAsyncTask = MalwareScanAsyncTask(
            activity as MainActivity, lottieScanAnimation,
            malwareScanWheelProgress, currentApp, malwareScanRecyclerView, scanButton
        )

        malwareScanWheelProgress.setOnClickListener(View.OnClickListener {

            malwareScanWheelProgress.text = getString(R.string.progress)
            if (malwareAsyncTask.status == AsyncTask.Status.RUNNING) {

            } else {
                malwareAsyncTask = MalwareScanAsyncTask(
                    activity as MainActivity, lottieScanAnimation,
                    malwareScanWheelProgress, currentApp, malwareScanRecyclerView, scanButton
                ).execute() as MalwareScanAsyncTask
            }

        })

        return view
    }


    class MalwareScanAsyncTask(
        context: MainActivity,
        lottieScanAnimation: LottieAnimationView,
        malwareScanWheelProgress: CircularProgressView,
        currentApp: TextView,
        malwareRecyclerView: RecyclerView,
        scanButton: Button
    ) : AsyncTask<Void, Void, MutableList<InstalledApp>>() {

        private var appContext : Context = context
        private var mDatabase: FirebaseDatabase? = FirebaseDatabase.getInstance()

        private var lottieAnimation : LottieAnimationView = lottieScanAnimation
        private var progressView : CircularProgressView = malwareScanWheelProgress
        private var currentAppScan : TextView = currentApp
        private var malwareRecyclerView : RecyclerView = malwareRecyclerView
        private lateinit var installedAppsAdapter: InstalledAppsAdapter
        private var malwarePackgesApps: MutableList<InstalledApp> = mutableListOf()
        private var scanButton : Button = scanButton



        @RequiresApi(Build.VERSION_CODES.M)
        override fun doInBackground(vararg params: Void): MutableList<InstalledApp>? {
            var malwarePackageListString : ArrayList<String> = ArrayList()

            if (!hasInternetConnection()) {
                Handler(Looper.getMainLooper()).post {
                    Toast.makeText(
                        appContext,
                        appContext.getString(R.string.internet_conn_check),
                        Toast.LENGTH_LONG
                    ).show()
                }
                return malwarePackgesApps
            }
            if (mDatabase == null) {
                mDatabase!!.setPersistenceEnabled(true)
            }
            val db = mDatabase!!.reference
            db.keepSynced(true)

            db.child("packages").addListenerForSingleValueEvent(object : ValueEventListener {

                override fun onDataChange(dataSnapshot: DataSnapshot) {
                    malwarePackageListString = dataSnapshot.getValue() as ArrayList<String>
                }

                override fun onCancelled(p0: DatabaseError) {
                    malwarePackageListString = ArrayList()
                }
            })
            val installedApps = DumpApps(appContext, true).getListApps()
            val increment = 100.00 / installedApps.size
            for (app in installedApps) {
                Thread.sleep(100)
                progressView.progress += increment.toFloat()
                Handler(Looper.getMainLooper()).post {
                    currentAppScan.text = appContext.getString(R.string.malware_app_scan) +
                                                                    " "+ app.name
                }

                if (malwarePackageListString.contains(app.packageName)) {
                    malwarePackgesApps.add(app)
                }
            }

            return malwarePackgesApps
        }

        @RequiresApi(Build.VERSION_CODES.M)
        private fun hasInternetConnection(): Boolean {
            val connectivityManager =
                appContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager

            if(connectivityManager.activeNetworkInfo != null){
                val network: Network? = connectivityManager.activeNetwork
                val capabilities = connectivityManager
                    .getNetworkCapabilities(network)
                return (capabilities != null
                        && capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED))
            }

            return false
        }

        override fun onPreExecute() {
            super.onPreExecute()
            //lottieAnimation.visibility = View.VISIBLE
            //lottieAnimation.playAnimation()
            scanButton.text =  appContext.getString(R.string.scanning)
            progressView.progress = 0F
            malwareRecyclerView.apply {
                layoutManager = LinearLayoutManager(
                    this.context,
                    LinearLayoutManager.VERTICAL,
                    false
                )
                adapter = null
            }
        }

        @SuppressLint("Range")
        @RequiresApi(Build.VERSION_CODES.M)
        override fun onPostExecute(result: MutableList<InstalledApp>) {
            super.onPostExecute(result)
            lottieAnimation.cancelAnimation()
            lottieAnimation.progress = 100F
            lottieAnimation.visibility = View.GONE
            currentAppScan.text = ""
            scanButton.text = appContext.getString(R.string.done)

            installedAppsAdapter = InstalledAppsAdapter(malwarePackgesApps, appContext)
            installedAppsAdapter.setClickListener(object : ItemClickListener {
                override fun onItemClick(position: Int) {
                    val intent = Intent(
                        appContext.applicationContext,
                        AppDetailActivity::class.java
                    )
                    intent.putExtra("app", malwarePackgesApps[position])
                    appContext.startActivity(intent)
                }
            })
            malwareRecyclerView.setLayoutManager(LinearLayoutManager(appContext))
            malwareRecyclerView.apply {
                layoutManager = LinearLayoutManager(
                    this.context,
                    LinearLayoutManager.VERTICAL,
                    false
                )
                adapter = installedAppsAdapter
            }
        }
    }

    override fun onStart() {
        super.onStart()
        activity!!.nav_view.setCheckedItem(R.id.nav_malware_scan)
        activity!!.toolbar.toolbarTitle.text = getString(R.string.menu_malware_scan)
    }

}