/*
 * This file is part of PObY-A.
 *
 * Copyright (C) 2023 ICTrust SÃ rl
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
package ch.ictrust.pobya.fragment


import android.content.Intent
import android.graphics.Color
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.FrameLayout
import android.widget.LinearLayout
import android.widget.TextView
import androidx.constraintlayout.widget.ConstraintLayout.LayoutParams
import androidx.coordinatorlayout.widget.CoordinatorLayout
import androidx.fragment.app.Fragment
import androidx.lifecycle.LiveData
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import ch.ictrust.pobya.R
import ch.ictrust.pobya.activity.AppDetailActivity
import ch.ictrust.pobya.adapter.MalwareAdapter
import ch.ictrust.pobya.models.InstalledApplication
import ch.ictrust.pobya.service.MalwareScanService
import com.airbnb.lottie.LottieAnimationView
import com.owl93.dpb.CircularProgressView
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch


class MalwareScanFragment : Fragment() {

    private lateinit var malwareScanWheelProgress: CircularProgressView
    private lateinit var scanButton: Button

    private lateinit var malscanResultLotie: LottieAnimationView
    private lateinit var scanOK: TextView
    private var malwarePackgesApps: MutableList<InstalledApplication> = mutableListOf()

    private lateinit var malwareRecyclerView: RecyclerView
    private val currentProgress: LiveData<Float> = MalwareScanService.scanProgressLiveData
    private val currentMalwareDetected: LiveData<ArrayList<InstalledApplication>> =
        MalwareScanService.detectedMalwarePackagesApps
    private val currentStatusText: LiveData<String> = MalwareScanService.scanStatus

    private lateinit var frameLayoutcontainer: FrameLayout
    private lateinit var llMalwareFoundLayout: LinearLayout
    private lateinit var llBackground: LinearLayout
    private lateinit var malwareAdapter: MalwareAdapter

    lateinit var appsViewModel: AppsViewModel

    private val scanJob = Job()

    @OptIn(DelicateCoroutinesApi::class)
    private val uiScope = CoroutineScope(GlobalScope.coroutineContext + scanJob)


    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val view: View = inflater.inflate(R.layout.fragment_malware_scan, container, false)
        appsViewModel = ViewModelProvider(this)[AppsViewModel::class.java]

        malwareScanWheelProgress = view.findViewById(R.id.malware_scan_wheelprogress)
        scanButton = view.findViewById(R.id.scanHome)
        malscanResultLotie = view.findViewById(R.id.lottieMalwareResultAnimation)

        malwareRecyclerView = view.findViewById(R.id.rvMalwareList)
        scanOK = view.findViewById(R.id.tvScanOk)
        frameLayoutcontainer = view.findViewById(R.id.flMainContainer)

        llMalwareFoundLayout = view.findViewById(R.id.llMalwareFoundText)
        malwareAdapter = MalwareAdapter()

        llBackground = view.findViewById(R.id.background)

        llMalwareFoundLayout.visibility = CoordinatorLayout.VISIBLE
        malwareScanWheelProgress.animate()
        malwareScanWheelProgress.progress = 0F

        val intent = Intent(view.context, MalwareScanService::class.java)

        malwareRecyclerView.apply {
            layoutManager = LinearLayoutManager(
                view.context,
                LinearLayoutManager.VERTICAL,
                false
            )
            adapter = null
        }

        malwareScanWheelProgress.setOnClickListener(View.OnClickListener {
            if (scanButton.text == view.context.getString(R.string.scanning))
                return@OnClickListener
            malwarePackgesApps.clear()
            llMalwareFoundLayout.visibility = View.INVISIBLE
            malwareScanWheelProgress.progress = 0F
            malwareScanWheelProgress.strokeColor = resources.getColor(R.color.colorPrimary)
            scanOK.visibility = View.GONE
            frameLayoutcontainer.layoutParams = LayoutParams(
                LayoutParams.MATCH_PARENT,
                LayoutParams.MATCH_PARENT
            )

            llBackground.visibility = View.GONE

            uiScope.launch {
                view.context.startService(intent)
            }

            malscanResultLotie.visibility = View.GONE
            malwareRecyclerView.apply {
                layoutManager = LinearLayoutManager(
                    view.context,
                    LinearLayoutManager.VERTICAL,
                    false
                )
                adapter = null
            }
        })

        currentStatusText.observe(viewLifecycleOwner) { current ->
            scanButton.text = current
        }

        currentMalwareDetected.observe(viewLifecycleOwner) { current ->
            malwarePackgesApps = current
            malwareAdapter.submitList(malwarePackgesApps)
            malwareRecyclerView.adapter = malwareAdapter
            frameLayoutcontainer.layoutParams = LayoutParams(
                LayoutParams.MATCH_PARENT,
                LayoutParams.WRAP_CONTENT
            )
            llBackground.visibility = View.VISIBLE
            llMalwareFoundLayout.visibility = View.VISIBLE
        }

        currentProgress.observe(viewLifecycleOwner) { current ->
            malwareScanWheelProgress.progress = current

            if (current >= 99.5) {
                frameLayoutcontainer.layoutParams =
                    LayoutParams(LayoutParams.MATCH_PARENT, 800)
                if (malwarePackgesApps.size == 0) {
                    llBackground.visibility = View.GONE
                    llMalwareFoundLayout.visibility = View.GONE
                    scanOK.visibility = View.VISIBLE
                    malscanResultLotie.visibility = LottieAnimationView.VISIBLE
                    malscanResultLotie.repeatCount = 1
                    malscanResultLotie.playAnimation()
                    malwareScanWheelProgress.strokeColor = Color.GREEN
                } else {
                    llMalwareFoundLayout.visibility = View.VISIBLE
                    frameLayoutcontainer.layoutParams =
                        LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)
                    malwareScanWheelProgress.strokeColor =
                        view.context.getColor(R.color.warningColor)

                    scanOK.visibility = View.GONE
                    malscanResultLotie.visibility = LottieAnimationView.GONE

                    malwareAdapter.setOnItemClickListener(object :
                        MalwareAdapter.OnItemClickListener {
                        override fun onItemClick(app: InstalledApplication) {
                            val intentAppDetails = Intent(context, AppDetailActivity::class.java)
                            intentAppDetails.putExtra("app", app)
                            view.context.startActivity(intentAppDetails)
                        }
                    })
                }
            }
        }
        return view
    }

}