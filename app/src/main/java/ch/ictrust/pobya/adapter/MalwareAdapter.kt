/*
 * This file is part of PObY-A.
 *
 * Copyright (C) 2023 ICTrust SÃ rl
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
package ch.ictrust.pobya.adapter


import android.content.Context
import android.content.Intent
import android.graphics.drawable.BitmapDrawable
import android.graphics.drawable.Icon
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.RelativeLayout
import android.widget.TextView
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import ch.ictrust.pobya.R
import ch.ictrust.pobya.activity.AppDetailActivity
import ch.ictrust.pobya.models.ApplicationState
import ch.ictrust.pobya.models.InstalledApplication
import com.google.android.material.imageview.ShapeableImageView
import com.google.android.material.shape.CornerFamily


class MalwareAdapter : ListAdapter<InstalledApplication, MalwareAdapter.AppHolder>(
    DIFF_CALLBACK
) {
    private lateinit var listener: OnItemClickListener
    private lateinit var context: Context

    override fun onCreateViewHolder(
        parent: ViewGroup,
        viewType: Int
    ): AppHolder {
        val view: View = LayoutInflater.from(parent.context)
            .inflate(R.layout.listview_malware, parent, false)
        context = view.context
        return AppHolder(view)
    }

    override fun submitList(list: List<InstalledApplication>?) {
        super.submitList(list?.let { ArrayList(it) })
    }

    override fun onBindViewHolder(
        holder: MalwareAdapter.AppHolder,
        position: Int
    ) {

        val currentApp: InstalledApplication = getItem(position)
        holder.image.background = BitmapDrawable.createFromStream(currentApp.icon.inputStream(), "")
        holder.imageName.text = currentApp.name

        val radius: Float = context.resources.getDimension(R.dimen.roundedCornerPrimary)
        holder.image.setImageIcon(Icon.createWithData(currentApp.icon, 0, currentApp.icon.size))
        holder.image.shapeAppearanceModel = holder.image.shapeAppearanceModel
            .toBuilder()
            .setAllCorners(CornerFamily.ROUNDED, radius)
            .build()

        holder.parentLayout.setOnClickListener {
            val intent = Intent(holder.itemView.context, AppDetailActivity::class.java)
            intent.putExtra("app", currentApp)
            holder.itemView.context.startActivity(intent)
        }

        when (currentApp.applicationState) {
            ApplicationState.DANGEROUS -> {
                holder.tvState.text = context.getString(R.string.warning)
                holder.tvState.setTextColor(context.resources.getColor(R.color.warningColor))
            }

            ApplicationState.NORMAL -> {
                holder.tvState.text = context.getString(R.string.normal)
                holder.tvState.setTextColor(context.resources.getColor(R.color.doneColor))
            }

            ApplicationState.MEDIUM -> {
                holder.tvState.text = context.getString(R.string.medium)
                holder.tvState.setTextColor(context.resources.getColor(R.color.warningColor))
            }

            ApplicationState.MALWARE -> {
                holder.tvState.text = "Malware"//context.getString(R.string.malware)
                holder.tvState.setTextColor(context.resources.getColor(R.color.purple))
                holder.tvThreatDetails.text = currentApp.flagReason
            }

            ApplicationState.SUSPICIOUS -> {
                holder.tvState.text = "Suspicious" //context.getString(R.string.unknown)
                holder.tvState.setTextColor(context.resources.getColor(R.color.warningColor))

            }

            ApplicationState.TRUSTED -> {
                holder.tvState.text = "trusted" //context.getString(R.string.trusted)
                holder.tvState.setTextColor(context.resources.getColor(R.color.doneColor))
            }

        }
    }

    inner class AppHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        var image: ShapeableImageView
        var imageName: TextView
        var parentLayout: RelativeLayout
        var tvState: TextView
        var tvThreatDetails: TextView

        init {
            image = itemView.findViewById(R.id.imageAppMalware)
            imageName = itemView.findViewById(R.id.tvAppMalwareName)
            parentLayout = itemView.findViewById(R.id.rlCardViewListMalware)
            tvState = itemView.findViewById(R.id.tvMalwareStatus)
            parentLayout.setOnClickListener {
                val position = adapterPosition
                if (position != RecyclerView.NO_POSITION) {
                    listener.onItemClick(getItem(position))
                }
            }
            tvThreatDetails = itemView.findViewById(R.id.tvScanThreatDetails)
        }
    }

    interface OnItemClickListener {

        fun onItemClick(app: InstalledApplication)
    }

    fun setOnItemClickListener(listener: OnItemClickListener) {
        this.listener = listener
    }

    companion object {
        private val DIFF_CALLBACK: DiffUtil.ItemCallback<InstalledApplication> =
            object : DiffUtil.ItemCallback<InstalledApplication>() {
                override fun areItemsTheSame(
                    oldItem: InstalledApplication,
                    newItem: InstalledApplication
                ): Boolean {
                    return oldItem.packageName == newItem.packageName && oldItem.name == newItem.name && oldItem.isSystemApp == newItem.isSystemApp && oldItem.versionCode == newItem.versionCode && oldItem.applicationState == newItem.applicationState && oldItem.uninstalled == newItem.uninstalled
                }

                override fun areContentsTheSame(
                    oldItem: InstalledApplication,
                    newItem: InstalledApplication
                ): Boolean {
                    return oldItem.name == newItem.name && oldItem.isSystemApp == newItem.isSystemApp && oldItem.versionCode == newItem.versionCode && oldItem.applicationState == newItem.applicationState && oldItem.uninstalled == newItem.uninstalled
                }
            }

    }
}