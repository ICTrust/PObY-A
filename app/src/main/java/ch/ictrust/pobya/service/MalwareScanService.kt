package ch.ictrust.pobya.service

import android.app.Service
import android.content.Intent
import android.os.IBinder
import android.util.Log
import android.widget.Toast
import androidx.lifecycle.MutableLiveData
import ch.ictrust.pobya.R
import ch.ictrust.pobya.database.AppDatabase
import ch.ictrust.pobya.models.InstalledApplication
import ch.ictrust.pobya.models.MalwareScan
import ch.ictrust.pobya.utillies.ApplicationPermissionHelper
import ch.ictrust.pobya.utillies.FirebaseHelper
import ch.ictrust.pobya.utillies.Utilities
import com.google.firebase.database.ChildEventListener
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import kotlinx.coroutines.*


class MalwareScanService : Service() {

    private var malwarePackageListString: ArrayList<String> = ArrayList()
    private lateinit var firebaseHelper: FirebaseHelper
    private var tag: String = "MalwareScanService"
    private var progress: Float = 0F
    private var malwarePackagesApps: ArrayList<InstalledApplication> = ArrayList()


    companion object {
        var scanProgressLiveData = MutableLiveData<Float>()
        var currentAppLiveData = MutableLiveData<String>()
        var scanStatus = MutableLiveData<String>()
        var detectedMalwarePackagesApps = MutableLiveData<ArrayList<InstalledApplication>>()

    }

    override fun onCreate() {
        super.onCreate()
        updateMalwareDB()
        progress = 0F
    }

    private fun updateMalwareDB() {
        firebaseHelper = FirebaseHelper()
        malwarePackageListString = ArrayList()
        if (!Utilities.haveInternetConnection(applicationContext)) {
            val makeText = Toast.makeText(applicationContext,
                applicationContext.getString(R.string.update_database_failed), Toast.LENGTH_SHORT)
            makeText.show()

        }
        firebaseHelper.getDatabaseReference().child("packages")
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(dataSnapshot: DataSnapshot) {
                    malwarePackageListString = if (dataSnapshot.value is HashMap<*, *>) {
                        val data = dataSnapshot.value as HashMap<*, *>
                        val malwareList = ArrayList(data.values.toList())
                        malwareList as ArrayList<String>
                    } else {
                        dataSnapshot.value as ArrayList<String>
                    }
                }

                override fun onCancelled(p0: DatabaseError) {
                    Log.e(tag, p0.details)
                }
            })

        firebaseHelper.getDatabase().reference.addChildEventListener(object :
            ChildEventListener {
            override fun onChildAdded(dataSnapshot: DataSnapshot, p1: String?) {
                malwarePackageListString.add(dataSnapshot.value.toString())
            }

            override fun onChildChanged(p0: DataSnapshot, p1: String?) {
                malwarePackageListString.add(p0.value.toString())
            }

            override fun onChildRemoved(p0: DataSnapshot) {
                TODO("Not yet implemented")
            }

            override fun onChildMoved(p0: DataSnapshot, p1: String?) {
                TODO("Not yet implemented")
            }

            override fun onCancelled(p0: DatabaseError) {
                TODO("Not yet implemented")
            }
        })
    }

    override fun onBind(intent: Intent?): IBinder? {
        TODO("Not yet implemented")
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        progress = 0F
        var installedApplications: List<InstalledApplication>
        Utilities.dbScope.launch {
            scanStatus.postValue(applicationContext.getString(R.string.scanning))
            installedApplications = ApplicationPermissionHelper(baseContext, true).getListApps(true)
            malwarePackagesApps = ArrayList()
            val increment = 100.00 / installedApplications.size
            if (malwarePackageListString.size == 0) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(baseContext, getString(R.string.empty_db), Toast.LENGTH_SHORT).show()
                }
                scanStatus.postValue(applicationContext.getString(R.string.no_internet_conn))
                return@launch
            }
            for (app in installedApplications) {
                Thread.sleep(100)
                progress += increment.toFloat()
                scanProgressLiveData.postValue(progress)

                if (malwarePackageListString.contains(app.packageName)) {
                    malwarePackagesApps.add(app)
                    detectedMalwarePackagesApps.postValue(malwarePackagesApps)
                }
            }
            AppDatabase.getInstance(applicationContext).malwareScanDao().insert(
                MalwareScan( 0, System.currentTimeMillis(), malwarePackagesApps.size))

            scanStatus.postValue(applicationContext.getString(R.string.done))
        }
        stopSelf()
        return START_NOT_STICKY
    }
}