package ch.ictrust.pobya.service

import android.app.Application
import android.app.Service
import android.content.Intent
import android.content.pm.PackageManager
import android.os.IBinder
import android.widget.Toast
import androidx.lifecycle.MutableLiveData
import ch.ictrust.pobya.R
import ch.ictrust.pobya.clam.ClamManager
import ch.ictrust.pobya.clam.models.ClamDbType
import ch.ictrust.pobya.clam.repositroy.ClamVersionRepository
import ch.ictrust.pobya.database.AppDatabase
import ch.ictrust.pobya.models.InstalledApplication
import ch.ictrust.pobya.models.MalwareScan
import ch.ictrust.pobya.repository.MalwareCertRepository
import ch.ictrust.pobya.repository.MalwareRepository
import ch.ictrust.pobya.utillies.ApplicationPermissionHelper
import ch.ictrust.pobya.utillies.Prefs
import ch.ictrust.pobya.utillies.Utilities
import ch.ictrust.pobya.utillies.Utilities.toHex
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.*


class MalwareScanService : Service() {

    private var malwarePackageListString: ArrayList<String> = ArrayList()
    private var tag: String = "MalwareScanService"
    private var progress: Float = 0F
    private var malwarePackagesApps: ArrayList<InstalledApplication> = ArrayList()



    companion object {
        var scanProgressLiveData = MutableLiveData<Float>()
        var scanStatus = MutableLiveData<String>()
        var detectedMalwarePackagesApps = MutableLiveData<ArrayList<InstalledApplication>>()
    }

    override fun onCreate() {
        super.onCreate()
        Utilities.updateMalwareDB(applicationContext)
        progress = 0F
    }

    override fun onBind(intent: Intent?): IBinder? {
        TODO("Not yet implemented")
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        malwarePackagesApps = ArrayList()
        progress = 0F
        val scanSysApps = Prefs.getInstance(applicationContext)?.enableSysAppScan
        var installedApplications: List<InstalledApplication>
        Utilities.dbScope.launch {
            val lastUpdate = ClamVersionRepository.getInstance(application).getLast()

            if ((lastUpdate == null) || ((Date().time - lastUpdate.updateDate) > 86400)) {
                // TODO: remove hardcoded values
                scanStatus.postValue("Updating db")
                Utilities.downloadCVD(applicationContext, ClamDbType.DAILY)
            }
            scanStatus.postValue(applicationContext.getString(R.string.scanning))
            installedApplications =
                ApplicationPermissionHelper(baseContext, scanSysApps!!).getListApps(true)
            malwarePackageListString =
                MalwareRepository.getInstance(applicationContext as Application)
                    .getAllMalware() as ArrayList<String>
            malwarePackagesApps = ArrayList()
            val increment = 100.00 / installedApplications.size
            if (malwarePackageListString.size == 0) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(baseContext, getString(R.string.empty_db), Toast.LENGTH_SHORT)
                        .show()
                }
                scanStatus.postValue(applicationContext.getString(R.string.no_internet_conn))
                return@launch
            }

            for (app in installedApplications) {
                val pm = applicationContext.packageManager.getPackageInfo(
                    app.packageName, PackageManager.GET_SIGNATURES
                )
                progress += increment.toFloat()

                // check Hash signature exist in HSB DB
                val flagged = ClamManager.getInstance(applicationContext)
                    .checkHSB(pm.applicationInfo.publicSourceDir, app.packageName)

                // TODO: add information to AppScanResult with information
                if (flagged) {
                    malwarePackagesApps.add(app)
                    scanProgressLiveData.postValue(progress)
                    detectedMalwarePackagesApps.postValue(malwarePackagesApps)
                    continue
                }

                // Check if certificate exist in mal-db
                val hexSignature = ApplicationPermissionHelper(baseContext, scanSysApps)
                    .getAppCert(app.packageName)
                    .toHex()

                if (malwarePackageListString.contains(app.packageName)) {
                    if (MalwareCertRepository.getInstance(applicationContext as Application)
                            .getAllMalwareCerts().contains(hexSignature)
                    ) {
                        malwarePackagesApps.add(app)
                        scanProgressLiveData.postValue(progress)
                        detectedMalwarePackagesApps.postValue(malwarePackagesApps)
                        continue
                    }
                }

                if (MalwareCertRepository.getInstance(applicationContext as Application)
                        .getAllMalwareCerts().contains(hexSignature)
                ) {
                    malwarePackagesApps.add(app)
                    detectedMalwarePackagesApps.postValue(malwarePackagesApps)
                }
                scanProgressLiveData.postValue(progress)
            }

            AppDatabase.getInstance(applicationContext).malwareScanDao().insert(
                MalwareScan(System.currentTimeMillis(), malwarePackagesApps.size)
            )
            scanStatus.postValue(applicationContext.getString(R.string.done))
        }
        stopSelf()
        return START_NOT_STICKY
    }
}