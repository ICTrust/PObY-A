package ch.ictrust.pobya.service

import android.app.Application
import android.app.Service
import android.content.Intent
import android.icu.lang.UCharacter
import android.os.IBinder
import android.widget.Toast
import androidx.lifecycle.MutableLiveData
import ch.ictrust.pobya.R
import ch.ictrust.pobya.database.AppDatabase
import ch.ictrust.pobya.models.InstalledApplication
import ch.ictrust.pobya.models.MalwareScan
import ch.ictrust.pobya.repository.MalwareCertRepository
import ch.ictrust.pobya.repository.MalwareRepository
import ch.ictrust.pobya.utillies.ApplicationPermissionHelper
import ch.ictrust.pobya.utillies.Utilities
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext


class MalwareScanService : Service() {

    private var malwarePackageListString: ArrayList<String> = ArrayList()
    private var tag: String = "MalwareScanService"
    private var progress: Float = 0F
    private var malwarePackagesApps: ArrayList<InstalledApplication> = ArrayList()

    companion object {
        var scanProgressLiveData = MutableLiveData<Float>()
        var scanStatus = MutableLiveData<String>()
        var detectedMalwarePackagesApps = MutableLiveData<ArrayList<InstalledApplication>>()

    }

    override fun onCreate() {
        super.onCreate()
        updateMalwareDB()
        progress = 0F
    }

    private fun updateMalwareDB() {
        if (!Utilities.hasInternetConnection(applicationContext)) {
            val makeText = Toast.makeText(applicationContext,
                applicationContext.getString(R.string.update_database_failed), Toast.LENGTH_SHORT)
            makeText.show()

        } else {
            Utilities.updateMalwareDB(applicationContext)
        }
    }

    override fun onBind(intent: Intent?): IBinder? {
        TODO("Not yet implemented")
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        updateMalwareDB()
        malwarePackagesApps = ArrayList()
        progress = 0F
        var installedApplications: List<InstalledApplication>
        Utilities.dbScope.launch {
            scanStatus.postValue(applicationContext.getString(R.string.scanning))

            installedApplications = ApplicationPermissionHelper(baseContext, true).getListApps(true)

            malwarePackageListString = MalwareRepository.getInstance(applicationContext as Application).getAllMalware() as ArrayList<String>
            malwarePackagesApps = ArrayList()
            val increment = 100.00 / installedApplications.size
            if (malwarePackageListString.size == 0) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(baseContext, getString(R.string.empty_db), Toast.LENGTH_SHORT).show()
                }
                scanStatus.postValue(applicationContext.getString(R.string.no_internet_conn))
                return@launch
            }
            for (app in installedApplications) {
                progress += increment.toFloat()
                scanProgressLiveData.postValue(progress)
                val hexSignature = ApplicationPermissionHelper(baseContext, true).getAppCert(app.packageName).toHex()
                if (malwarePackageListString.contains(app.packageName)) {
                    println(app.packageName)
                    println(hexSignature)
                    if (MalwareCertRepository.getInstance(applicationContext as Application).getAllMalwareCerts().contains(hexSignature)) {
                        malwarePackagesApps.add(app)
                        detectedMalwarePackagesApps.postValue(malwarePackagesApps)
                        continue
                   }
                }
                if (MalwareCertRepository.getInstance(applicationContext as Application).getAllMalwareCerts().contains(hexSignature)) {
                    malwarePackagesApps.add(app)
                    detectedMalwarePackagesApps.postValue(malwarePackagesApps)
                }
            }
            AppDatabase.getInstance(applicationContext).malwareScanDao().insert(
                MalwareScan( 0, System.currentTimeMillis(), malwarePackagesApps.size))

            scanStatus.postValue(applicationContext.getString(R.string.done))
        }
        stopSelf()
        return START_NOT_STICKY
    }

    private fun ByteArray.toHex(): String = UCharacter.toLowerCase(joinToString(separator = "") { eachByte -> "%02x".format(eachByte) }).drop(8)


}