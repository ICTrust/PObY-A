package ch.ictrust.pobya.activity

import android.content.Context
import android.content.Intent
import android.graphics.Color
import android.net.ConnectivityManager
import android.net.Network
import android.net.NetworkCapabilities
import android.os.*
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.appcompat.app.ActionBar
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import ch.ictrust.pobya.R
import ch.ictrust.pobya.Utillies.DumpApps
import ch.ictrust.pobya.Utillies.FirebaseHelper
import ch.ictrust.pobya.adapter.InstalledAppsAdapter
import ch.ictrust.pobya.fragment.*
import ch.ictrust.pobya.listener.ItemClickListener
import ch.ictrust.pobya.models.InstalledApp
import com.airbnb.lottie.LottieAnimationView
import com.google.firebase.database.*
import com.owl93.dpb.CircularProgressView
import kotlinx.android.synthetic.main.activity_main.*
import kotlinx.android.synthetic.main.activity_malware_scan.*
import kotlinx.android.synthetic.main.app_bar_main.*
import kotlinx.android.synthetic.main.app_bar_main.view.*
import kotlinx.android.synthetic.main.fragment_app_permissions.view.*
import kotlinx.coroutines.*


class MalwareScanActivity : AppCompatActivity(){

    private lateinit var malwareScanWheelProgress: CircularProgressView
    private lateinit var currentApp: TextView
    private lateinit var malwareScanRecyclerView : RecyclerView
    private lateinit var scanButton : Button
    private lateinit var malscanResultLotie: LottieAnimationView
    private lateinit var firebaseHelper : FirebaseHelper
    //private lateinit var malwareAsyncTask : MalwareScanAsyncTask
    private var dbFail : Boolean = false
    private lateinit var scanOK: TextView
    private var malwarePackgesApps: MutableList<InstalledApp> = mutableListOf()
    private lateinit var installedAppsAdapter: InstalledAppsAdapter
    private lateinit var malwareRecyclerView : RecyclerView


    val scanJob = Job()
    val uiScope = CoroutineScope(GlobalScope.coroutineContext + scanJob)



    @RequiresApi(Build.VERSION_CODES.M)
    override fun onCreate(savedInstanceState: Bundle?) {

        super.onCreate(savedInstanceState)

        setContentView(R.layout.activity_malware_scan)

        malwareScanWheelProgress = findViewById(R.id.malware_scan_wheelprogress)
        currentApp = findViewById(R.id.malware_app_scan_tv)
        malwareScanRecyclerView = findViewById(R.id.malware_list_recyclerView)
        scanButton = findViewById(R.id.scanHome)
        malscanResultLotie = findViewById(R.id.malware_result_animation)

        malwareRecyclerView = findViewById(R.id.malware_list_recyclerView)
        scanOK = findViewById(R.id.scan_looks_ok)

        currentApp.text = ""
        malwareScanWheelProgress.animate()
        malwareScanWheelProgress.progress = 0F
        val actionbar: ActionBar? = supportActionBar
        actionbar?.apply {
            setDisplayHomeAsUpEnabled(true)
            setDisplayShowTitleEnabled(true)
        }
        actionbar!!.hide()
        val toolbar = findViewById<Toolbar>(R.id.toolbar)
        toolbar.setNavigationIcon(R.drawable.ic_back)
        toolbar.setNavigationOnClickListener {
            finish()
        }

        malwareRecyclerView.layoutManager = LinearLayoutManager(applicationContext)

        malwareScanWheelProgress.setOnClickListener(View.OnClickListener {
            try {
                currentApp.text = ""
                malwarePackgesApps.clear()
                malwareRecyclerView.apply {
                    layoutManager = LinearLayoutManager(
                        applicationContext,
                        LinearLayoutManager.VERTICAL,
                        false
                    )
                    adapter = null
                }
                uiScope.launch {
                    withContext(Dispatchers.IO) {
                        scan()
                    }
                }
            } catch (ex: CancellationException) {
                scanJob.cancel()
                Toast.makeText(
                    applicationContext,
                    getString(R.string.update_database_failed),
                    Toast.LENGTH_LONG
                ).show()
            }
        })

    }

    @RequiresApi(Build.VERSION_CODES.M)
    private suspend fun scan(){
        malwareScanWheelProgress.strokeColor = Color.BLUE
        val intent = Intent(this, AppDetailActivity::class.java)
        firebaseHelper = FirebaseHelper()
        var malwarePackageListString : ArrayList<String> = ArrayList()
        withContext(Dispatchers.Main) {
            scanButton.text = getString(R.string.scanning)
            malwareScanWheelProgress.progress = 0F
            scanOK.visibility = View.GONE
            malscanResultLotie.visibility = View.GONE

            if (!hasInternetConnection()) {
                Toast.makeText(
                    applicationContext,
                    getString(R.string.update_database_failed),
                    Toast.LENGTH_LONG
                ).show()
                Toast.makeText(
                    applicationContext,
                    getString(R.string.internet_conn_check),
                    Toast.LENGTH_LONG
                ).show()
            }
        }

        firebaseHelper.getDatabaseReference().child("packages").addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                malwarePackageListString = if (dataSnapshot.value is HashMap<*, *>) {
                    val data =  dataSnapshot.value as HashMap<*,*>
                    val malwareList: Any? = ArrayList(data.values.toList())
                    malwareList as ArrayList<String>
                } else {
                    dataSnapshot.value as ArrayList<String>
                }
            }

            override fun onCancelled(p0: DatabaseError) {
                Log.e("", p0.details)
            }
        })

        firebaseHelper.getDatabase().reference.addChildEventListener(object : ChildEventListener{
            override fun onChildAdded(dataSnapshot: DataSnapshot, p1: String?) {
                malwarePackageListString.add(dataSnapshot.value.toString())
            }

            override fun onChildChanged(p0: DataSnapshot, p1: String?) {
                malwarePackageListString.add(p0.value.toString())
            }

            override fun onChildRemoved(p0: DataSnapshot) {
                TODO("Not yet implemented")
            }

            override fun onChildMoved(p0: DataSnapshot, p1: String?) {
                TODO("Not yet implemented")
            }

            override fun onCancelled(p0: DatabaseError) {
                TODO("Not yet implemented")
            }

        })

        val installedApps = DumpApps(baseContext, true).getListApps()
        val increment = 100.00 / installedApps.size
        if (malwarePackageListString.size == 0) {
            dbFail = true
            withContext(Dispatchers.Main) {
                scanButton.text = R.string.retry_scan.toString()
                Toast.makeText(
                    applicationContext,
                    getString(R.string.update_database_failed),
                    Toast.LENGTH_LONG
                ).show()
                throw CancellationException(R.string.update_database_failed.toString())
            }
        }
        for (app in installedApps) {
            yield()
            Thread.sleep(100)
            malwareScanWheelProgress.progress += increment.toFloat()
            withContext(Dispatchers.Main) {
                currentApp.text = getString(R.string.malware_app_scan) + " " + app.name
            }

            if (malwarePackageListString.contains(app.packageName)) {
                malwarePackgesApps.add(app)
            }
        }

        withContext(Dispatchers.Main) {
            currentApp.text = " "

            scanButton.text = getString(R.string.done)
            if (!dbFail)
                if (malwarePackgesApps.size == 0) {
                    scanOK.visibility = View.VISIBLE
                    malware_result_animation.visibility = View.VISIBLE
                    malware_result_animation.progress = 0F
                    malware_result_animation.playAnimation()
                    malwareScanWheelProgress.strokeColor = Color.GREEN
                } else {
                    malwareScanWheelProgress.strokeColor = Color.RED
                    currentApp.text = R.string.malware_found.toString()
                    currentApp.textSize = 16F
                    installedAppsAdapter = InstalledAppsAdapter(malwarePackgesApps, applicationContext)
                    installedAppsAdapter.setClickListener(object : ItemClickListener {
                        override fun onItemClick(position: Int) {

                            intent.putExtra("app", malwarePackgesApps[position])
                            startActivity(intent)
                        }
                    })

                    malwareRecyclerView.apply {
                        layoutManager = LinearLayoutManager(
                            applicationContext,
                            LinearLayoutManager.VERTICAL,
                            false
                        )
                        adapter = installedAppsAdapter
                    }
                }
        }
    }



    @RequiresApi(Build.VERSION_CODES.M)
    private fun hasInternetConnection(): Boolean {
        val connectivityManager =
            getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager

        if(connectivityManager.activeNetworkInfo != null){
            val network: Network? = connectivityManager.activeNetwork
            val capabilities = connectivityManager
                .getNetworkCapabilities(network)
            return (capabilities != null
                    && capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED))
        }
        return false
    }


    override fun onRestart() {
        scanJob.cancel()
        uiScope.ensureActive()
        super.onRestart()
    }

    override fun onBackPressed() {
        scanJob.cancel()
        uiScope.cancel()
        super.onBackPressed()
    }

    override fun onStop() {
        scanJob.cancel()
        uiScope.cancel()
        super.onStop()
    }



}
